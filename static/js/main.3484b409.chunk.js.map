{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","components/Header.js","containers/App.js","actions.js","reducers.js","registerServiceWorker.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","id","name","email","className","alt","src","CardList","robots","cardComponent","map","user","idx","SearchBox","searchFiled","searchChange","type","placeholder","onChange","Scroll","style","overflowX","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","nextProps","nextState","console","log","React","connect","searchfield","searchRobots","requestRobots","isPending","dispatch","onsearchChange","event","text","target","value","payload","onRequestRobots","fetch","response","json","data","catch","useEffect","filterRobots","filter","robot","toLowerCase","includes","initialStatesearch","initialStaterobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3484b409.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    const { id, name, email } = props;\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img alt=\"Image\" src={`https://robohash.org/${id}`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardComponent = robots.map((user,idx) => {\r\n        return (\r\n            <Card key={idx} id={robots[idx].id} name={robots[idx].name} email={robots[idx].email}/>\r\n        )\r\n        \r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchFiled, searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b-green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowX: 'scroll', height:'900px'}}>\r\n            {props.children}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops That was not Expected!!!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React from 'react';\r\n\r\nclass Header extends React.Component{\r\n    shouldComponentUpdate(nextProps,nextState){\r\n        return false\r\n    }\r\n    render(){\r\n        console.log(\"HEADER\")\r\n        return <h1>ROBOFRIENDS</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport { setSearchfield,requestRobots } from \"../actions\";\r\nimport Header from \"../components/Header\";\r\n\r\n\r\n\r\nfunction App({searchfield,onsearchChange,onRequestRobots,robots,isPending}) {\r\n  useEffect(() => {\r\n     onRequestRobots()\r\n  }, []);\r\n\r\n  const filterRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  });\r\n  return isPending ? (\r\n    <h1 className=\"tc\">LOADING!!!!</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n      <Header/>\r\n      <SearchBox searchChange={onsearchChange} />\r\n      <Scroll>\r\n        <ErrorBoundary>\r\n          <CardList robots={filterRobots} />\r\n        </ErrorBoundary>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      searchfield: state.searchRobots.searchfield,\r\n      robots: state.requestRobots.robots,\r\n      isPending: state.requestRobots.isPending,\r\n      error: state.requestRobots.error\r\n    };\r\n  };\r\n  \r\n  const mapDispatchToProps = dispatch => {\r\n   return{\r\n      onsearchChange: event => dispatch(setSearchfield(event.target.value)),\r\n      onRequestRobots: () => requestRobots(dispatch)\r\n   }\r\n  };\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED } from \"./constants\";\r\n\r\nexport const setSearchfield = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then( data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n  .catch( error => dispatch({ type: REQUEST_ROBOTS_FAILED,payload: error}))\r\n}","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED } from \"./constants\";\r\n\r\nconst initialStatesearch = {\r\n  searchfield: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStatesearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n    return {\r\n      ...state,searchfield:action.payload\r\n    }\r\n    default: \r\n    return state\r\n  }\r\n};\r\n\r\nconst initialStaterobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStaterobots,action={}) => {\r\n  switch (action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n    return {\r\n      ...state,isPending: true\r\n    }\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n    return {\r\n      ...state,robots: action.payload,isPending:false\r\n    }\r\n    case REQUEST_ROBOTS_FAILED:\r\n    return {\r\n      ...state,robots: action.payload,isPending:false\r\n    }\r\n    default: \r\n    return state\r\n  }\r\n}","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware,combineReducers } from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport App from \"./containers/App\";\nimport { searchRobots,requestRobots } from \"./reducers\";\nimport { createLogger } from 'redux-logger';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducers,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </div>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}